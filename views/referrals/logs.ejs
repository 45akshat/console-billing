<!DOCTYPE html>
<html>
<head>
  <title>Referral Logs</title>
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f4f6f9;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    #search {
      display: block;
      margin: 0 auto 20px;
      padding: 10px 14px;
      width: 50%;
      font-size: 15px;
      border-radius: 8px;
      border: 1px solid #ccc;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }
    table {
      border-collapse: collapse;
      width: 90%;
      margin: 0 auto;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    th, td {
      padding: 12px;
      text-align: center;
      border-bottom: 1px solid #eee;
    }
    th {
      background-color: #3f51b5;

      color: white;
    }
    tr:nth-child(even) {
      background: #f9f9f9;
    }
    #pagination {
      text-align: center;
      margin-top: 20px;
    }
    #pagination button {
      margin: 0 8px;
      padding: 8px 16px;
      border: none;
      background: #333;
      color: white;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      border-radius: 6px;
      transition: background 0.2s ease-in-out;
    }
    #pagination button:hover:not(:disabled) {
      background: #555;
    }
    #pagination button:disabled {
      background: #bbb;
      cursor: not-allowed;
    }
  </style>
</head>
<body>
  <h1>Referral Logs</h1>

  <!-- Search Bar -->
  <input type="text" id="search" placeholder="Search by Referrer ID, Name, Email, Reason...">

  <table id="logsTable">
    <thead>
      <tr>
        <th>Referrer ID</th>
        <th>Points Given</th>
        <th>Reason</th>
        <th>Date</th>
      </tr>
    </thead>
    <tbody id="tableBody">
      <!-- Rows will be injected by JS -->
    </tbody>
  </table>

  <!-- Pagination Controls -->
  <div id="pagination"></div>

  <script>
    // Pass logs from server to JS
    const allLogs = <%- JSON.stringify(logs) %>;

    const rowsPerPage = 5;
    let currentPage = 1;
    let filteredLogs = allLogs;

    const tableBody = document.getElementById('tableBody');
    const paginationDiv = document.getElementById('pagination');
    const searchInput = document.getElementById('search');

    function renderTable(logs, page = 1) {
      tableBody.innerHTML = '';
      const start = (page - 1) * rowsPerPage;
      const end = start + rowsPerPage;
      const pageLogs = logs.slice(start, end);

      if (pageLogs.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6">No logs found</td></tr>';
        return;
      }

      pageLogs.forEach(log => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${log.referrerId?._id || log.referrerId || 'N/A'}</td>
          <td>${log.pointsGiven}</td>
          <td>${log.reason || 'N/A'}</td>
          <td>${new Date(log.createdAt).toLocaleString()}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    function renderPagination(logs) {
      paginationDiv.innerHTML = '';
      const totalPages = Math.ceil(logs.length / rowsPerPage);

      if (totalPages <= 1) return;

      const prevBtn = document.createElement('button');
      prevBtn.innerText = 'Prev';
      prevBtn.disabled = currentPage === 1;
      prevBtn.onclick = () => {
        if (currentPage > 1) {
          currentPage--;
          renderTable(filteredLogs, currentPage);
          renderPagination(filteredLogs);
        }
      };
      paginationDiv.appendChild(prevBtn);

      const nextBtn = document.createElement('button');
      nextBtn.innerText = 'Next';
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.onclick = () => {
        if (currentPage < totalPages) {
          currentPage++;
          renderTable(filteredLogs, currentPage);
          renderPagination(filteredLogs);
        }
      };
      paginationDiv.appendChild(nextBtn);
    }

    // Search functionality
    searchInput.addEventListener('input', () => {
      const query = searchInput.value.toLowerCase();
      filteredLogs = allLogs.filter(log =>
        (log.referrerId?._id || log.referrerId || '').toLowerCase().includes(query) ||
        (log.referrerId?.full_name || '').toLowerCase().includes(query) ||
        (log.referrerId?.email || '').toLowerCase().includes(query) ||
        (log.reason || '').toLowerCase().includes(query)
      );
      currentPage = 1;
      renderTable(filteredLogs, currentPage);
      renderPagination(filteredLogs);
    });

    // Initial render
    renderTable(filteredLogs, currentPage);
    renderPagination(filteredLogs);
  </script>
</body>
</html>
